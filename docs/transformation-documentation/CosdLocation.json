{
  "omopTable": "Location",
  "origin": "COSD",
  "omopColumns": [
    {
      "name": "zip",
      "operation_description": "Uppercase the postcode then insert the space in the correct location, if needed.",
      "dataSource": [
        {
          "name": "Postcode",
          "description": "Patient Postcode",
          "origins": [
            {
              "origin": "POSTCODE OF USUAL ADDRESS (AT DIAGNOSIS)",
              "url": null
            }
          ]
        }
      ],
      "query": "\nwith \n\tXMLNAMESPACES('http://www.datadictionary.nhs.uk/messages/COSD-v8-1' AS COSD81, 'http://www.datadictionary.nhs.uk/messages/COSD-v9-0-1' AS COSD901),\n\tCosdRecords as ( \n\n\tselect\n\t\tT.staging.value('(Id/@root)[1]', 'uniqueidentifier') as Id,\n\t\tT.staging.query('*[local-name() != \"Id\"][1]/*[1]') as Node, -- Select the first inner element of the element that is not called Id.\n\t\tconvert(bit, 1) as Is81\n\tfrom omop_staging.cosd_staging\n\tcross apply content.nodes('COSD81:COSD/*') as T(staging)\n\twhere T.staging.exist('Id/@root') = 1\n\tunion all\n\tselect\n\t\tT.staging.value('(Id/@root)[1]', 'uniqueidentifier') as Id,\n\t\tT.staging.query('.') as Node,\n\t\tconvert(bit, 0) as Is81\n\tfrom omop_staging.cosd_staging\n\tcross apply content.nodes('COSD901:COSD/*') as T(staging)\n\twhere T.staging.exist('Id/@root') = 1\n), COSDElements as (\n\tselect\n\t\tId,\n\t\tNode.query('(*[1]/*[fn:contains (fn:local-name(.), \"LinkagePatientId\")])[1]') as LinkagePatient,\n\t\tNode.query('(*[1]/*[fn:contains (fn:local-name(.), \"Demographics\")])[1]') as Demographics,\n\t\tIs81\n\tfrom CosdRecords\n), Patients as (\n\tselect\n\t\tLinkagePatient.value('(*/*[local-name() = \"NHSNumber\" or local-name() = \"NhsNumber\"]/@extension)[1]', 'varchar(max)') as NhsNumber,\n\t\tLinkagePatient.value('(*/*[local-name() = \"PersonBirthDate\" or local-name() = \"Birthdate\"])[1]', 'varchar(max)') as DateOfBirth,\n\t\tDemographics.value('(*/EthnicCategory/@code)[1]', 'varchar(max)') as EthnicCategory,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][1]/text())[1]', 'VARCHAR(255)') as StreetAddressLine1,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][2]/text())[1]', 'VARCHAR(255)') as StreetAddressLine2,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][3]/text())[1]', 'VARCHAR(255)') as StreetAddressLine3,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][4]/text())[1]', 'VARCHAR(255)') as StreetAddressLine4,\n\t\tcase when Is81 = 1 then Demographics.value('(*/Postcode/postalCode)[1]', 'varchar(max)') else Demographics.value('(*/PostcodeOfUsualAddressAtDiagnosis/text())[1]', 'VARCHAR(10)') end as Postcode\n\tfrom COSDElements\n)\nselect\n\tNhsNumber,\n\tmax (DateOfBirth) as DateOfBirth,\n\tmax (EthnicCategory) as EthnicCategory,\n\tmax (StreetAddressLine1) as StreetAddressLine1,\n\tmax (StreetAddressLine2) as StreetAddressLine2,\n\tmax (StreetAddressLine3) as StreetAddressLine3,\n\tmax (StreetAddressLine4) as StreetAddressLine4,\n\tmax (Postcode) as Postcode\nfrom Patients \nwhere NhsNumber != ''\ngroup by NhsNumber\n\t",
      "lookup_table_markdown": null
    },
    {
      "name": "location_source_value",
      "operation_description": "Separates text with newlines. Trim whitespace.",
      "dataSource": [
        {
          "name": "StreetAddressLine1",
          "description": "The first line of the address.",
          "origins": [
            {
              "origin": "PATIENT USUAL ADDRESS (AT DIAGNOSIS)",
              "url": null
            }
          ]
        },
        {
          "name": "StreetAddressLine2",
          "description": "The second line of the address.",
          "origins": [
            {
              "origin": "PATIENT USUAL ADDRESS (AT DIAGNOSIS)",
              "url": null
            }
          ]
        },
        {
          "name": "StreetAddressLine3",
          "description": "The third line of the address.",
          "origins": [
            {
              "origin": "PATIENT USUAL ADDRESS (AT DIAGNOSIS)",
              "url": null
            }
          ]
        },
        {
          "name": "StreetAddressLine4",
          "description": "The fourth line of the address.",
          "origins": [
            {
              "origin": "PATIENT USUAL ADDRESS (AT DIAGNOSIS)",
              "url": null
            }
          ]
        },
        {
          "name": "Postcode",
          "description": "Patient Postcode",
          "origins": [
            {
              "origin": "POSTCODE OF USUAL ADDRESS (AT DIAGNOSIS)",
              "url": null
            }
          ]
        }
      ],
      "query": "\nwith \n\tXMLNAMESPACES('http://www.datadictionary.nhs.uk/messages/COSD-v8-1' AS COSD81, 'http://www.datadictionary.nhs.uk/messages/COSD-v9-0-1' AS COSD901),\n\tCosdRecords as ( \n\n\tselect\n\t\tT.staging.value('(Id/@root)[1]', 'uniqueidentifier') as Id,\n\t\tT.staging.query('*[local-name() != \"Id\"][1]/*[1]') as Node, -- Select the first inner element of the element that is not called Id.\n\t\tconvert(bit, 1) as Is81\n\tfrom omop_staging.cosd_staging\n\tcross apply content.nodes('COSD81:COSD/*') as T(staging)\n\twhere T.staging.exist('Id/@root') = 1\n\tunion all\n\tselect\n\t\tT.staging.value('(Id/@root)[1]', 'uniqueidentifier') as Id,\n\t\tT.staging.query('.') as Node,\n\t\tconvert(bit, 0) as Is81\n\tfrom omop_staging.cosd_staging\n\tcross apply content.nodes('COSD901:COSD/*') as T(staging)\n\twhere T.staging.exist('Id/@root') = 1\n), COSDElements as (\n\tselect\n\t\tId,\n\t\tNode.query('(*[1]/*[fn:contains (fn:local-name(.), \"LinkagePatientId\")])[1]') as LinkagePatient,\n\t\tNode.query('(*[1]/*[fn:contains (fn:local-name(.), \"Demographics\")])[1]') as Demographics,\n\t\tIs81\n\tfrom CosdRecords\n), Patients as (\n\tselect\n\t\tLinkagePatient.value('(*/*[local-name() = \"NHSNumber\" or local-name() = \"NhsNumber\"]/@extension)[1]', 'varchar(max)') as NhsNumber,\n\t\tLinkagePatient.value('(*/*[local-name() = \"PersonBirthDate\" or local-name() = \"Birthdate\"])[1]', 'varchar(max)') as DateOfBirth,\n\t\tDemographics.value('(*/EthnicCategory/@code)[1]', 'varchar(max)') as EthnicCategory,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][1]/text())[1]', 'VARCHAR(255)') as StreetAddressLine1,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][2]/text())[1]', 'VARCHAR(255)') as StreetAddressLine2,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][3]/text())[1]', 'VARCHAR(255)') as StreetAddressLine3,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][4]/text())[1]', 'VARCHAR(255)') as StreetAddressLine4,\n\t\tcase when Is81 = 1 then Demographics.value('(*/Postcode/postalCode)[1]', 'varchar(max)') else Demographics.value('(*/PostcodeOfUsualAddressAtDiagnosis/text())[1]', 'VARCHAR(10)') end as Postcode\n\tfrom COSDElements\n)\nselect\n\tNhsNumber,\n\tmax (DateOfBirth) as DateOfBirth,\n\tmax (EthnicCategory) as EthnicCategory,\n\tmax (StreetAddressLine1) as StreetAddressLine1,\n\tmax (StreetAddressLine2) as StreetAddressLine2,\n\tmax (StreetAddressLine3) as StreetAddressLine3,\n\tmax (StreetAddressLine4) as StreetAddressLine4,\n\tmax (Postcode) as Postcode\nfrom Patients \nwhere NhsNumber != ''\ngroup by NhsNumber\n\t",
      "lookup_table_markdown": null
    },
    {
      "name": "nhs_number",
      "operation_description": "Value copied from `NhsNumber`",
      "dataSource": [
        {
          "name": "NhsNumber",
          "description": "Patient NHS Number",
          "origins": [
            {
              "origin": "NHS NUMBER",
              "url": null
            }
          ]
        }
      ],
      "query": "\nwith \n\tXMLNAMESPACES('http://www.datadictionary.nhs.uk/messages/COSD-v8-1' AS COSD81, 'http://www.datadictionary.nhs.uk/messages/COSD-v9-0-1' AS COSD901),\n\tCosdRecords as ( \n\n\tselect\n\t\tT.staging.value('(Id/@root)[1]', 'uniqueidentifier') as Id,\n\t\tT.staging.query('*[local-name() != \"Id\"][1]/*[1]') as Node, -- Select the first inner element of the element that is not called Id.\n\t\tconvert(bit, 1) as Is81\n\tfrom omop_staging.cosd_staging\n\tcross apply content.nodes('COSD81:COSD/*') as T(staging)\n\twhere T.staging.exist('Id/@root') = 1\n\tunion all\n\tselect\n\t\tT.staging.value('(Id/@root)[1]', 'uniqueidentifier') as Id,\n\t\tT.staging.query('.') as Node,\n\t\tconvert(bit, 0) as Is81\n\tfrom omop_staging.cosd_staging\n\tcross apply content.nodes('COSD901:COSD/*') as T(staging)\n\twhere T.staging.exist('Id/@root') = 1\n), COSDElements as (\n\tselect\n\t\tId,\n\t\tNode.query('(*[1]/*[fn:contains (fn:local-name(.), \"LinkagePatientId\")])[1]') as LinkagePatient,\n\t\tNode.query('(*[1]/*[fn:contains (fn:local-name(.), \"Demographics\")])[1]') as Demographics,\n\t\tIs81\n\tfrom CosdRecords\n), Patients as (\n\tselect\n\t\tLinkagePatient.value('(*/*[local-name() = \"NHSNumber\" or local-name() = \"NhsNumber\"]/@extension)[1]', 'varchar(max)') as NhsNumber,\n\t\tLinkagePatient.value('(*/*[local-name() = \"PersonBirthDate\" or local-name() = \"Birthdate\"])[1]', 'varchar(max)') as DateOfBirth,\n\t\tDemographics.value('(*/EthnicCategory/@code)[1]', 'varchar(max)') as EthnicCategory,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][1]/text())[1]', 'VARCHAR(255)') as StreetAddressLine1,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][2]/text())[1]', 'VARCHAR(255)') as StreetAddressLine2,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][3]/text())[1]', 'VARCHAR(255)') as StreetAddressLine3,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][4]/text())[1]', 'VARCHAR(255)') as StreetAddressLine4,\n\t\tcase when Is81 = 1 then Demographics.value('(*/Postcode/postalCode)[1]', 'varchar(max)') else Demographics.value('(*/PostcodeOfUsualAddressAtDiagnosis/text())[1]', 'VARCHAR(10)') end as Postcode\n\tfrom COSDElements\n)\nselect\n\tNhsNumber,\n\tmax (DateOfBirth) as DateOfBirth,\n\tmax (EthnicCategory) as EthnicCategory,\n\tmax (StreetAddressLine1) as StreetAddressLine1,\n\tmax (StreetAddressLine2) as StreetAddressLine2,\n\tmax (StreetAddressLine3) as StreetAddressLine3,\n\tmax (StreetAddressLine4) as StreetAddressLine4,\n\tmax (Postcode) as Postcode\nfrom Patients \nwhere NhsNumber != ''\ngroup by NhsNumber\n\t",
      "lookup_table_markdown": null
    },
    {
      "name": "address_1",
      "operation_description": "Convert text to uppercase. Trim whitespace.",
      "dataSource": [
        {
          "name": "StreetAddressLine1",
          "description": "The first line of the address.",
          "origins": [
            {
              "origin": "PATIENT USUAL ADDRESS (AT DIAGNOSIS)",
              "url": null
            }
          ]
        }
      ],
      "query": "\nwith \n\tXMLNAMESPACES('http://www.datadictionary.nhs.uk/messages/COSD-v8-1' AS COSD81, 'http://www.datadictionary.nhs.uk/messages/COSD-v9-0-1' AS COSD901),\n\tCosdRecords as ( \n\n\tselect\n\t\tT.staging.value('(Id/@root)[1]', 'uniqueidentifier') as Id,\n\t\tT.staging.query('*[local-name() != \"Id\"][1]/*[1]') as Node, -- Select the first inner element of the element that is not called Id.\n\t\tconvert(bit, 1) as Is81\n\tfrom omop_staging.cosd_staging\n\tcross apply content.nodes('COSD81:COSD/*') as T(staging)\n\twhere T.staging.exist('Id/@root') = 1\n\tunion all\n\tselect\n\t\tT.staging.value('(Id/@root)[1]', 'uniqueidentifier') as Id,\n\t\tT.staging.query('.') as Node,\n\t\tconvert(bit, 0) as Is81\n\tfrom omop_staging.cosd_staging\n\tcross apply content.nodes('COSD901:COSD/*') as T(staging)\n\twhere T.staging.exist('Id/@root') = 1\n), COSDElements as (\n\tselect\n\t\tId,\n\t\tNode.query('(*[1]/*[fn:contains (fn:local-name(.), \"LinkagePatientId\")])[1]') as LinkagePatient,\n\t\tNode.query('(*[1]/*[fn:contains (fn:local-name(.), \"Demographics\")])[1]') as Demographics,\n\t\tIs81\n\tfrom CosdRecords\n), Patients as (\n\tselect\n\t\tLinkagePatient.value('(*/*[local-name() = \"NHSNumber\" or local-name() = \"NhsNumber\"]/@extension)[1]', 'varchar(max)') as NhsNumber,\n\t\tLinkagePatient.value('(*/*[local-name() = \"PersonBirthDate\" or local-name() = \"Birthdate\"])[1]', 'varchar(max)') as DateOfBirth,\n\t\tDemographics.value('(*/EthnicCategory/@code)[1]', 'varchar(max)') as EthnicCategory,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][1]/text())[1]', 'VARCHAR(255)') as StreetAddressLine1,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][2]/text())[1]', 'VARCHAR(255)') as StreetAddressLine2,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][3]/text())[1]', 'VARCHAR(255)') as StreetAddressLine3,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][4]/text())[1]', 'VARCHAR(255)') as StreetAddressLine4,\n\t\tcase when Is81 = 1 then Demographics.value('(*/Postcode/postalCode)[1]', 'varchar(max)') else Demographics.value('(*/PostcodeOfUsualAddressAtDiagnosis/text())[1]', 'VARCHAR(10)') end as Postcode\n\tfrom COSDElements\n)\nselect\n\tNhsNumber,\n\tmax (DateOfBirth) as DateOfBirth,\n\tmax (EthnicCategory) as EthnicCategory,\n\tmax (StreetAddressLine1) as StreetAddressLine1,\n\tmax (StreetAddressLine2) as StreetAddressLine2,\n\tmax (StreetAddressLine3) as StreetAddressLine3,\n\tmax (StreetAddressLine4) as StreetAddressLine4,\n\tmax (Postcode) as Postcode\nfrom Patients \nwhere NhsNumber != ''\ngroup by NhsNumber\n\t",
      "lookup_table_markdown": null
    },
    {
      "name": "address_2",
      "operation_description": "Convert text to uppercase. Trim whitespace.",
      "dataSource": [
        {
          "name": "StreetAddressLine2",
          "description": "The second line of the address.",
          "origins": [
            {
              "origin": "PATIENT USUAL ADDRESS (AT DIAGNOSIS)",
              "url": null
            }
          ]
        }
      ],
      "query": "\nwith \n\tXMLNAMESPACES('http://www.datadictionary.nhs.uk/messages/COSD-v8-1' AS COSD81, 'http://www.datadictionary.nhs.uk/messages/COSD-v9-0-1' AS COSD901),\n\tCosdRecords as ( \n\n\tselect\n\t\tT.staging.value('(Id/@root)[1]', 'uniqueidentifier') as Id,\n\t\tT.staging.query('*[local-name() != \"Id\"][1]/*[1]') as Node, -- Select the first inner element of the element that is not called Id.\n\t\tconvert(bit, 1) as Is81\n\tfrom omop_staging.cosd_staging\n\tcross apply content.nodes('COSD81:COSD/*') as T(staging)\n\twhere T.staging.exist('Id/@root') = 1\n\tunion all\n\tselect\n\t\tT.staging.value('(Id/@root)[1]', 'uniqueidentifier') as Id,\n\t\tT.staging.query('.') as Node,\n\t\tconvert(bit, 0) as Is81\n\tfrom omop_staging.cosd_staging\n\tcross apply content.nodes('COSD901:COSD/*') as T(staging)\n\twhere T.staging.exist('Id/@root') = 1\n), COSDElements as (\n\tselect\n\t\tId,\n\t\tNode.query('(*[1]/*[fn:contains (fn:local-name(.), \"LinkagePatientId\")])[1]') as LinkagePatient,\n\t\tNode.query('(*[1]/*[fn:contains (fn:local-name(.), \"Demographics\")])[1]') as Demographics,\n\t\tIs81\n\tfrom CosdRecords\n), Patients as (\n\tselect\n\t\tLinkagePatient.value('(*/*[local-name() = \"NHSNumber\" or local-name() = \"NhsNumber\"]/@extension)[1]', 'varchar(max)') as NhsNumber,\n\t\tLinkagePatient.value('(*/*[local-name() = \"PersonBirthDate\" or local-name() = \"Birthdate\"])[1]', 'varchar(max)') as DateOfBirth,\n\t\tDemographics.value('(*/EthnicCategory/@code)[1]', 'varchar(max)') as EthnicCategory,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][1]/text())[1]', 'VARCHAR(255)') as StreetAddressLine1,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][2]/text())[1]', 'VARCHAR(255)') as StreetAddressLine2,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][3]/text())[1]', 'VARCHAR(255)') as StreetAddressLine3,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][4]/text())[1]', 'VARCHAR(255)') as StreetAddressLine4,\n\t\tcase when Is81 = 1 then Demographics.value('(*/Postcode/postalCode)[1]', 'varchar(max)') else Demographics.value('(*/PostcodeOfUsualAddressAtDiagnosis/text())[1]', 'VARCHAR(10)') end as Postcode\n\tfrom COSDElements\n)\nselect\n\tNhsNumber,\n\tmax (DateOfBirth) as DateOfBirth,\n\tmax (EthnicCategory) as EthnicCategory,\n\tmax (StreetAddressLine1) as StreetAddressLine1,\n\tmax (StreetAddressLine2) as StreetAddressLine2,\n\tmax (StreetAddressLine3) as StreetAddressLine3,\n\tmax (StreetAddressLine4) as StreetAddressLine4,\n\tmax (Postcode) as Postcode\nfrom Patients \nwhere NhsNumber != ''\ngroup by NhsNumber\n\t",
      "lookup_table_markdown": null
    },
    {
      "name": "city",
      "operation_description": "Convert text to uppercase. Trim whitespace.",
      "dataSource": [
        {
          "name": "StreetAddressLine3",
          "description": "The third line of the address.",
          "origins": [
            {
              "origin": "PATIENT USUAL ADDRESS (AT DIAGNOSIS)",
              "url": null
            }
          ]
        }
      ],
      "query": "\nwith \n\tXMLNAMESPACES('http://www.datadictionary.nhs.uk/messages/COSD-v8-1' AS COSD81, 'http://www.datadictionary.nhs.uk/messages/COSD-v9-0-1' AS COSD901),\n\tCosdRecords as ( \n\n\tselect\n\t\tT.staging.value('(Id/@root)[1]', 'uniqueidentifier') as Id,\n\t\tT.staging.query('*[local-name() != \"Id\"][1]/*[1]') as Node, -- Select the first inner element of the element that is not called Id.\n\t\tconvert(bit, 1) as Is81\n\tfrom omop_staging.cosd_staging\n\tcross apply content.nodes('COSD81:COSD/*') as T(staging)\n\twhere T.staging.exist('Id/@root') = 1\n\tunion all\n\tselect\n\t\tT.staging.value('(Id/@root)[1]', 'uniqueidentifier') as Id,\n\t\tT.staging.query('.') as Node,\n\t\tconvert(bit, 0) as Is81\n\tfrom omop_staging.cosd_staging\n\tcross apply content.nodes('COSD901:COSD/*') as T(staging)\n\twhere T.staging.exist('Id/@root') = 1\n), COSDElements as (\n\tselect\n\t\tId,\n\t\tNode.query('(*[1]/*[fn:contains (fn:local-name(.), \"LinkagePatientId\")])[1]') as LinkagePatient,\n\t\tNode.query('(*[1]/*[fn:contains (fn:local-name(.), \"Demographics\")])[1]') as Demographics,\n\t\tIs81\n\tfrom CosdRecords\n), Patients as (\n\tselect\n\t\tLinkagePatient.value('(*/*[local-name() = \"NHSNumber\" or local-name() = \"NhsNumber\"]/@extension)[1]', 'varchar(max)') as NhsNumber,\n\t\tLinkagePatient.value('(*/*[local-name() = \"PersonBirthDate\" or local-name() = \"Birthdate\"])[1]', 'varchar(max)') as DateOfBirth,\n\t\tDemographics.value('(*/EthnicCategory/@code)[1]', 'varchar(max)') as EthnicCategory,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][1]/text())[1]', 'VARCHAR(255)') as StreetAddressLine1,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][2]/text())[1]', 'VARCHAR(255)') as StreetAddressLine2,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][3]/text())[1]', 'VARCHAR(255)') as StreetAddressLine3,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][4]/text())[1]', 'VARCHAR(255)') as StreetAddressLine4,\n\t\tcase when Is81 = 1 then Demographics.value('(*/Postcode/postalCode)[1]', 'varchar(max)') else Demographics.value('(*/PostcodeOfUsualAddressAtDiagnosis/text())[1]', 'VARCHAR(10)') end as Postcode\n\tfrom COSDElements\n)\nselect\n\tNhsNumber,\n\tmax (DateOfBirth) as DateOfBirth,\n\tmax (EthnicCategory) as EthnicCategory,\n\tmax (StreetAddressLine1) as StreetAddressLine1,\n\tmax (StreetAddressLine2) as StreetAddressLine2,\n\tmax (StreetAddressLine3) as StreetAddressLine3,\n\tmax (StreetAddressLine4) as StreetAddressLine4,\n\tmax (Postcode) as Postcode\nfrom Patients \nwhere NhsNumber != ''\ngroup by NhsNumber\n\t",
      "lookup_table_markdown": null
    },
    {
      "name": "county",
      "operation_description": "Convert text to uppercase. Trim whitespace.",
      "dataSource": [
        {
          "name": "StreetAddressLine4",
          "description": "The fourth line of the address.",
          "origins": [
            {
              "origin": "PATIENT USUAL ADDRESS (AT DIAGNOSIS)",
              "url": null
            }
          ]
        }
      ],
      "query": "\nwith \n\tXMLNAMESPACES('http://www.datadictionary.nhs.uk/messages/COSD-v8-1' AS COSD81, 'http://www.datadictionary.nhs.uk/messages/COSD-v9-0-1' AS COSD901),\n\tCosdRecords as ( \n\n\tselect\n\t\tT.staging.value('(Id/@root)[1]', 'uniqueidentifier') as Id,\n\t\tT.staging.query('*[local-name() != \"Id\"][1]/*[1]') as Node, -- Select the first inner element of the element that is not called Id.\n\t\tconvert(bit, 1) as Is81\n\tfrom omop_staging.cosd_staging\n\tcross apply content.nodes('COSD81:COSD/*') as T(staging)\n\twhere T.staging.exist('Id/@root') = 1\n\tunion all\n\tselect\n\t\tT.staging.value('(Id/@root)[1]', 'uniqueidentifier') as Id,\n\t\tT.staging.query('.') as Node,\n\t\tconvert(bit, 0) as Is81\n\tfrom omop_staging.cosd_staging\n\tcross apply content.nodes('COSD901:COSD/*') as T(staging)\n\twhere T.staging.exist('Id/@root') = 1\n), COSDElements as (\n\tselect\n\t\tId,\n\t\tNode.query('(*[1]/*[fn:contains (fn:local-name(.), \"LinkagePatientId\")])[1]') as LinkagePatient,\n\t\tNode.query('(*[1]/*[fn:contains (fn:local-name(.), \"Demographics\")])[1]') as Demographics,\n\t\tIs81\n\tfrom CosdRecords\n), Patients as (\n\tselect\n\t\tLinkagePatient.value('(*/*[local-name() = \"NHSNumber\" or local-name() = \"NhsNumber\"]/@extension)[1]', 'varchar(max)') as NhsNumber,\n\t\tLinkagePatient.value('(*/*[local-name() = \"PersonBirthDate\" or local-name() = \"Birthdate\"])[1]', 'varchar(max)') as DateOfBirth,\n\t\tDemographics.value('(*/EthnicCategory/@code)[1]', 'varchar(max)') as EthnicCategory,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][1]/text())[1]', 'VARCHAR(255)') as StreetAddressLine1,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][2]/text())[1]', 'VARCHAR(255)') as StreetAddressLine2,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][3]/text())[1]', 'VARCHAR(255)') as StreetAddressLine3,\n\t\tDemographics.value('(*/Address/StructuredAddress/*[local-name() = \"StreetAddressLine\" or local-name() = \"streetAddressLine\"][4]/text())[1]', 'VARCHAR(255)') as StreetAddressLine4,\n\t\tcase when Is81 = 1 then Demographics.value('(*/Postcode/postalCode)[1]', 'varchar(max)') else Demographics.value('(*/PostcodeOfUsualAddressAtDiagnosis/text())[1]', 'VARCHAR(10)') end as Postcode\n\tfrom COSDElements\n)\nselect\n\tNhsNumber,\n\tmax (DateOfBirth) as DateOfBirth,\n\tmax (EthnicCategory) as EthnicCategory,\n\tmax (StreetAddressLine1) as StreetAddressLine1,\n\tmax (StreetAddressLine2) as StreetAddressLine2,\n\tmax (StreetAddressLine3) as StreetAddressLine3,\n\tmax (StreetAddressLine4) as StreetAddressLine4,\n\tmax (Postcode) as Postcode\nfrom Patients \nwhere NhsNumber != ''\ngroup by NhsNumber\n\t",
      "lookup_table_markdown": null
    }
  ]
}